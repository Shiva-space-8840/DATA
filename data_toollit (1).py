# -*- coding: utf-8 -*-
"""data toollit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EAhi7jZvVVLPQ5L6AFJ6dqfGoKWqLBtg
"""

#1.Demonstrate three different methods for creating identical 2D arrays in NumPy. Provide the code for each method and the final output after each method?

import numpy as np

# Method 1: Using numpy.zeros
array1 = np.zeros((3, 4))
print("Method 1 - Array created using numpy.zeros:")
print(array1)

# Method 2: Using numpy.ones
array2 = np.ones((3, 4))
print("\nMethod 2 - Array created using numpy.ones:")
print(array2)

# Method 3: Using numpy.full
array3 = np.full((3, 4), 5)
print("\nMethod 3 - Array created using numpy.full:")
print(array3)

#2. Using the Numpy function, generate an array of 100 evenly spaced numbers between 1 to 10  and Reshape that 1D array into a 2D array?

import numpy as np

start_value= 0
end_value= 10
number_of_values = 6

# Generate array of evenly spaced numbers
w_array = np.linspace(start_value, end_value, number_of_values)

# Reshape the 1D array into a 2D array
w_array_2D = w_array.reshape(-1, 2)

print("Original array:")
print(w_array)

print("\n2D array:")
print(w_array_2D)

#3. Explain the following terms:
#The difference in np.array, np.asarray and np.asanyarray
#np.array:This function creates a new NumPy array from an existing data structure like a list or a tuple.
#np.asarray:This function also creates a NumPy array, but with slightly different behavior compared to np.array().
#np.asanyarray:This function also creates a NumPy array but with more flexibility.If the input is already a NumPy array, it returns the original array without making a copy, similar to np.asarray().
#Explain the following terms:
#The difference between Deep copy and shallow copy
#Shallow Copy stores the copy of the original object and points the references to the objects. A shallow copy is faster.
#Deep copy doesn’t reflect changes made to the new/copied object in the original object.Deep copy stores the copy of the original object and recursively copies the objects as wellDeep copy is comparatively slower.

#4. Generate a 3*3 array with random floating-point number between 5 and 20 then,round each number in the array to 2 decimal places?
import numpy as np

random_array = np.random.uniform(5, 20, size=(3, 3))

rounded_array = np.round(random_array, decimals=2)

print(rounded_array)

#5.Create a NumPy array with random integers between 1 to 10 of shape (5,6).After creating the array
#perform the following operations:a.Extract all even integers from array.
#b. Extract all odd integers from array.
#A.Extract all even integers from array:
import numpy as np

random_array = np.random.randint(1, 11, size=(5, 6))

print("Random Array:")
print(random_array)

even_integers = random_array[random_array % 2 == 0]

print("\nEven Integers:")
print(even_integers)

#5.Create a NumPy array with random integers between 1 to 10 of shape (5,6).After creating the array
#perform the following operations:
#B. Extract all odd integers from array
import numpy as np

random_array = np.random.randint(1, 11, size=(5, 6))

print("Random Array:")
print(random_array)

odd_integers = random_array[random_array % 2 != 0]

print("\nOdd Integers:")
print(odd_integers)

#6. Create a 3D NumPy array of shape (3,3,3) containing random integers between 1 to 10 Perform the following operations:

 #a. Find the indices of the maximum values along each depth level (third axis).

 #b. Perform element-wise multiplication of between both array.





#a. Find the indices of the maximum values along each depth level (third axis).

import numpy as np

array_3D = np.random.randint(1, 11, size=(3, 3, 3))

print("Original 3D Array:")
print(array_3D)
max_indices = np.argmax(array_3D, axis=2)

print("\nIndices of Maximum Values along Depth Level:")
print(max_indices)

#b. Perform element-wise multiplication of between both array.

import numpy as np
array_3d = np.random.randint(1, 11, size=(3, 3, 3))

# Create another 3D NumPy array with the same shape and random integers between 1 and 10
array2nd_3d = np.random.randint(1, 11, size=(3, 3, 3))

print("Original 3D Array:")
print(array_3d)
print("\nAnother 3D Array:")
print(array2nd_3d)

result_array = array_3d * array2nd_3d

print("\nElement-wise Multiplication Result:")
print(result_array)

#c>>Create a DataFrame by 'joining these Series by column, and, change the names of the columns to 'col1', 'col2',etc.
import pandas as pd
import numpy as np

# Creating the Series
series1 = pd.Series(np.random.randint(10, 51, size=50))
series2 = pd.Series(np.random.randint(100, 1000, size=50))

df = pd.DataFrame({'col1': series1, 'col2': series2})

new_column_names = [f'col{i}' for i in range(1, len(df.columns) + 1)]
df.columns = new_column_names

df

#6.Create a 7*5 Dataframe in Pandas using a series generated from 35 random integers between 1 to 6?
import pandas as pd
import numpy as np

random_integers = pd.Series(np.random.randint(1, 7, size=35))

df = pd.DataFrame(random_integers.values.reshape(7, 5))
df

#7.Clean and transform the 'Phone' column in the sample dataset to remove non-numeric characters and convert it to a numeric data type Also display the taPle attributes and data types of each column


import pandas as pd
import numpy as np
df =pd.read_csv("/content/People Data.csv")
df

df['Phone'] = df['Phone'].replace(r'\D', '', regex=True)
df.fillna(0,inplace=True)
df['Phone'] = df['Phone'].astype('int64')
df.dtypes

#8. Perform the following tas\s using people dataset:
#a) Read the 'data.csv' file using pandas, skipping the first 50 rows.
import pandas as pd
import numpy as np
df=pd.read_csv("/content/People Data.csv",skiprows=50)
df

#b) Only read the columns: 'Last Name', ‘Gender’,’Email’,‘Phone’ and ‘Salary’ from the file.
df=pd.read_csv("/content/People Data.csv",usecols=['Last Name','Gender','Email','Phone','Salary' ])
df

#c) Display the first 10 rows of the filtered dataset.
df['Phone'] = df['Phone'].replace(r'\D', '', regex=True)
df.fillna(0,inplace=True)
df['Phone'] = df['Phone'].astype('int64')
df.head(10)

#d) Extract the ‘Salary’' column as a Series and display its last 5 values.
lastsalary = df['Salary']
print("\nLast 5 Values of Salary:")
print(lastsalary.tail(5))

##9 Filter and select rows from the People_Dataset, where the “Last Name' column contains the name 'Duke', 'Gender' column contains the word Female and ‘Salary’ should be less than 85000.

new_df = df[(df['Last Name'] == 'Duke') & (df['Gender'] == 'Female') & (df['Salary'] < 85000)]

# Display the filtered DataFrame
print(new_df)

# 10 .Create a 7*5 Dataframe in Pandas using a series generated from 35 random integers between 1 to 6?
import pandas as pd
import numpy as np

random_integers = pd.Series(np.random.randint(1, 6, size=35))

df = pd.DataFrame(random_integers.values.reshape(7, 5))

print(df)

#11.Create two different Series, each of length 50, with the following criteria:
#a) The first Series should contain random numbers ranging from 10 to 50.
import pandas as pd
import numpy as np

# Create the first Series with random numbers ranging from 10 to 50
series1 = pd.Series(np.random.randint(10, 51, size=50))
series2 = pd.Series(np.random.randint(100,1001, size=50))

series1

#11.Create two different Series, each of length 50, with the following criteria:
#b) The second Series should contain random numbers ranging from 100 to 1000.

print(series2)

#11#c>>Create a DataFrame by 'joining these Series by column, and, change the names of the columns to 'col1', 'col2',etc.
import pandas as pd
import numpy as np

# Creating the Series
series1 = pd.Series(np.random.randint(10, 51, size=50))
series2 = pd.Series(np.random.randint(100, 1000, size=50))

df = pd.DataFrame({'col1': series1, 'col2': series2})

new_column_names = [f'col{i}' for i in range(1, len(df.columns) + 1)]
df.columns = new_column_names

df

#12.Perform the following operations using people data set:
#a) Delete the 'Email', 'Phone', and 'Date of birth' columns from the dataset.
df1=pd.read_csv("/content/People Data.csv")
df1.drop(['Email','Phone','Date of birth'],axis=1,inplace=True)
#b) Delete the rows containing any missing values.
df1.dropna(inplace=True)
#d) Print the final output also.
print(df1)

#14.Create a time-series dataset in a Pandas DataFrame with columns: 'Date', 'Temperature', 'Humidity' and Perform the following tasks using Matplotlib:

#a) Plot the 'Temperature' and 'Humidity' on the same plot with different y-axes (left y-axis for 'Temperature' and right y-axis for 'Humidity').

#b) Label the x-axis as 'Date'.

#c) Set the title of the plot as 'Temperature and Humidity Over Time




import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dates = pd.date_range(start='2024-05-26', periods=100)
temperature = np.random.normal(loc=25, scale=5, size=100)
humidity = np.random.normal(loc=50, scale=10, size=100)

df = pd.DataFrame({'Date': dates, 'Temperature': temperature, 'Humidity': humidity})
fig, ex1 = plt.subplots()

ex1.set_xlabel('Date')
ex1.set_ylabel('Temperature', color='blue')
ex1.plot(df['Date'], df['Temperature'], color='blue')
ex1.tick_params(axis='y', labelcolor='blue')

ex2 = ex1.twinx()
ex2.set_ylabel('Humidity', color='red')
ex2.plot(df['Date'], df['Humidity'],color='red')
ex2.tick_params(axis='y', labelcolor='red')

plt.title('Temperature and Humidity Over Time')

plt.show()

#15.Create a NumPy array data containing 1000 samples from a normal distribution. Perform the following tasks using Matplotlib:
#a) Plot a histogram of the data with 30 bins



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = np.random.normal(size=1000)
plt.hist(data, bins=30,color='indigo')
plt.title('Histogram of Normal Distribution')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.grid()
plt.show()

#15.Create a NumPy array data containing 1000 samples from a normal distribution. Perform the following tasks using Matplotlib:
#b) Overlay a line plot representing the normal distribution's probability density function (PDF).

#c) Label the x-axis as 'Value' and the y-axis as 'Frequency/Probability'.

#d) Set the title of the plot as 'Histogram with PDF Overlay

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# Generate 1000 samples from a normal distribution
data = np.random.normal(size=1000)

mean = np.mean(data)
std_dev = np.std(data)


x_values = np.linspace(mean - 3*std_dev, mean + 3*std_dev, 1000)

pdf_values = norm.pdf(x_values, loc=mean, scale=std_dev)

plt.hist(data, bins=30, density=True, alpha=0.7, label='Histogram')

plt.plot(x_values, pdf_values, color='green', linewidth=2, label='PDF')

plt.title('Histogram with PDF Overlay')
plt.xlabel('Value')
plt.ylabel('Frequency/Probability')
plt.legend()
plt.grid()
plt.show()

#16.Set the title of the plot as 'Histogram with PDF Overlay'.
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

data = np.random.normal(size=1000)

mean = np.mean(data)
std_dev = np.std(data)

x_values = np.linspace(mean - 3*std_dev, mean + 3*std_dev, 1000)

pdf_values = norm.pdf(x_values, loc=mean, scale=std_dev)

plt.hist(data, bins=30, density=True, alpha=0.7, label='Histogram')

plt.plot(x_values, pdf_values, color='red', linewidth=2, label='PDF')

plt.title('Histogram with PDF Overlay')
plt.xlabel('Value')
plt.ylabel('Density')
plt.legend()
plt.grid()
plt.show()

#17.Create a Seaborn scatter plot of two random arrays, color points based on their position relative to the origin (quadrants), add a legend, label the axes, and set the title as 'Quadrant-wise Scatter Plot'.
# Import Seaborn and Matplotlib
import seaborn as sns
import matplotlib.pyplot as plt

# Generating random data
np.random.seed(0)
x = np.random.randn(100)
y = np.random.randn(100)

# Determine quadrant for each point
quadrant = np.zeros_like(x, dtype=int)
quadrant[(x >= 0) & (y >= 0)] = 1  # Quadrant I
quadrant[(x < 0) & (y >= 0)] = 2   # Quadrant II
quadrant[(x < 0) & (y < 0)] = 3    # Quadrant III
quadrant[(x >= 0) & (y < 0)] = 4   # Quadrant IV

# Create scatter plot with Seaborn, using the 'quadrant' variable for color
sns.scatterplot(x=x, y=y, hue=quadrant)

# Add legend
plt.legend(title='Quadrant')

# Label axes and title
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Quadrant-wise Scatter Plot')

plt.show()

#18. With Bo+eh, plot a line chart of a sine wave function, add grid lines, label the axes, and set the title as 'Sine Wave Function.
from bokeh.plotting import figure, show
from bokeh.io import output_notebook

import numpy as np

x = np.linspace(0, 4*np.pi, 100)
y = np.sin(x)

p = figure(title="Sine Wave Function", x_axis_label='X', y_axis_label='Y')

p.grid.grid_line_alpha = 0.3

p.line(x, y, legend_label="sin(x)", line_width=2,color='red')

output_notebook()
show(p)

#19.Using Bo+eh, generate a bar chart of randomly generated categorical data, color bars based on their values, add hover tooltips to display exact values, label the axes, and set the title as 'Random Categorical Bar Chart?

from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.models import ColumnDataSource, HoverTool
import numpy as np

categories = ['A', 'B', 'C', 'D', 'E']
values = np.random.randint(1, 10, size=len(categories))

source = ColumnDataSource(data=dict(categories=categories, values=values, color=values))


p = figure(x_range=categories, title="Random Categorical Bar Chart", x_axis_label='Categories', y_axis_label='Values')


hover = HoverTool()
hover.tooltips = [("Value", "@values")]
p.add_tools(hover)

color_mapper = {cat: value for cat, value in zip(categories, values)}
p.vbar(x='categories', top='values', width=0.9, source=source, color='color', legend_field="categories")

p.xaxis.axis_label_text_font_size = "12pt"
p.yaxis.axis_label_text_font_size = "12pt"

output_notebook()
show(p)

#20.Using Plotly, create a basic line plot of a randomly generated dataset, label the axes, and set the title as 'Simple Line Plot'.
import plotly.graph_objs as go
import plotly.io as pio
import numpy as np

x = np.linspace(0, 10, 100)
y = np.random.rand(100)

trace = go.Scatter(x=x, y=y, mode='lines', name='Random Data')

layout = go.Layout(
    title='Simple Line Plot',
    xaxis=dict(title='X Axis'),
    yaxis=dict(title='Y Axis')
)

fig = go.Figure(data=[trace], layout=layout)

pio.show(fig)

#21.Using Plotly, create an interactive pie chart of randomly generated data, add labels and percentages, set the title as 'Interactive Pie Chart'.
import plotly.express as px
import numpy as np

# Randomly generate data
categories = ['Hindi', 'English', 'Science', 'Computer']
values = np.random.randint(1, 200, size=len(categories))

# Create pie chart
fig = px.pie(values=values, names=categories, labels={'labels': 'Categories', 'values': 'Values'}, title='Interactive Pie Chart')

# Add percentages
fig.update_traces(textposition='inside', textinfo='percent+label')

# Show plot
fig.show()

